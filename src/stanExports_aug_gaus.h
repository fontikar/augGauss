// Generated by rstantools.  Do not edit by hand.

/*
    rmot is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rmot is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rmot.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_aug_gaus_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'aug_gaus', line 20, column 3 to column 37)",
                                                      " (in 'aug_gaus', line 21, column 6 to column 42)",
                                                      " (in 'aug_gaus', line 22, column 6 to column 43)",
                                                      " (in 'aug_gaus', line 23, column 6 to column 44)",
                                                      " (in 'aug_gaus', line 24, column 6 to column 26)",
                                                      " (in 'aug_gaus', line 25, column 6 to column 30)",
                                                      " (in 'aug_gaus', line 26, column 6 to column 39)",
                                                      " (in 'aug_gaus', line 27, column 6 to column 41)",
                                                      " (in 'aug_gaus', line 28, column 6 to column 42)",
                                                      " (in 'aug_gaus', line 29, column 6 to column 43)",
                                                      " (in 'aug_gaus', line 32, column 3 to column 32)",
                                                      " (in 'aug_gaus', line 38, column 10 to column 108)",
                                                      " (in 'aug_gaus', line 36, column 10 to column 107)",
                                                      " (in 'aug_gaus', line 35, column 8 to line 38, column 108)",
                                                      " (in 'aug_gaus', line 34, column 28 to line 39, column 9)",
                                                      " (in 'aug_gaus', line 34, column 6 to line 39, column 9)",
                                                      " (in 'aug_gaus', line 33, column 26 to line 40, column 7)",
                                                      " (in 'aug_gaus', line 33, column 4 to line 40, column 7)",
                                                      " (in 'aug_gaus', line 65, column 3 to column 29)",
                                                      " (in 'aug_gaus', line 68, column 8 to column 92)",
                                                      " (in 'aug_gaus', line 67, column 28 to line 69, column 7)",
                                                      " (in 'aug_gaus', line 67, column 6 to line 69, column 7)",
                                                      " (in 'aug_gaus', line 66, column 26 to line 70, column 5)",
                                                      " (in 'aug_gaus', line 66, column 4 to line 70, column 5)",
                                                      " (in 'aug_gaus', line 49, column 8 to column 66)",
                                                      " (in 'aug_gaus', line 50, column 8 to column 62)",
                                                      " (in 'aug_gaus', line 51, column 8 to column 38)",
                                                      " (in 'aug_gaus', line 52, column 8 to column 48)",
                                                      " (in 'aug_gaus', line 53, column 8 to column 50)",
                                                      " (in 'aug_gaus', line 54, column 8 to column 48)",
                                                      " (in 'aug_gaus', line 48, column 30 to line 55, column 7)",
                                                      " (in 'aug_gaus', line 48, column 8 to line 55, column 7)",
                                                      " (in 'aug_gaus', line 57, column 36 to column 38)",
                                                      " (in 'aug_gaus', line 57, column 32 to column 35)",
                                                      " (in 'aug_gaus', line 57, column 6 to column 40)",
                                                      " (in 'aug_gaus', line 58, column 40 to column 41)",
                                                      " (in 'aug_gaus', line 58, column 38 to column 39)",
                                                      " (in 'aug_gaus', line 58, column 6 to column 43)",
                                                      " (in 'aug_gaus', line 59, column 41 to column 42)",
                                                      " (in 'aug_gaus', line 59, column 39 to column 40)",
                                                      " (in 'aug_gaus', line 59, column 6 to column 44)",
                                                      " (in 'aug_gaus', line 60, column 39 to column 42)",
                                                      " (in 'aug_gaus', line 60, column 37 to column 38)",
                                                      " (in 'aug_gaus', line 60, column 6 to column 44)",
                                                      " (in 'aug_gaus', line 61, column 27 to column 28)",
                                                      " (in 'aug_gaus', line 61, column 6 to column 31)",
                                                      " (in 'aug_gaus', line 47, column 28 to line 62, column 7)",
                                                      " (in 'aug_gaus', line 47, column 6 to line 62, column 7)",
                                                      " (in 'aug_gaus', line 12, column 2 to column 21)",
                                                      " (in 'aug_gaus', line 13, column 6 to column 25)",
                                                      " (in 'aug_gaus', line 14, column 14 to column 19)",
                                                      " (in 'aug_gaus', line 14, column 6 to column 21)",
                                                      " (in 'aug_gaus', line 15, column 40 to column 45)",
                                                      " (in 'aug_gaus', line 15, column 46 to column 51)",
                                                      " (in 'aug_gaus', line 15, column 6 to column 53)",
                                                      " (in 'aug_gaus', line 20, column 30 to column 35)",
                                                      " (in 'aug_gaus', line 21, column 35 to column 40)",
                                                      " (in 'aug_gaus', line 22, column 36 to column 41)",
                                                      " (in 'aug_gaus', line 23, column 37 to column 42)",
                                                      " (in 'aug_gaus', line 25, column 17 to column 22)",
                                                      " (in 'aug_gaus', line 25, column 23 to column 28)",
                                                      " (in 'aug_gaus', line 32, column 10 to column 15)",
                                                      " (in 'aug_gaus', line 32, column 16 to column 21)",
                                                      " (in 'aug_gaus', line 65, column 16 to column 21)",
                                                      " (in 'aug_gaus', line 65, column 22 to column 27)"};
#include <stan_meta_header.hpp>
class model_aug_gaus final : public model_base_crtp<model_aug_gaus> {
private:
  int nSubj;
  int nStim;
  std::vector<double> xs;
  std::vector<std::vector<double>> responses;
 
public:
  ~model_aug_gaus() { }
  
  inline std::string model_name() const final { return "model_aug_gaus"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_aug_gaus(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_aug_gaus_namespace::model_aug_gaus";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 49;
      context__.validate_dims("data initialization","nSubj","int",
          context__.to_vec());
      nSubj = std::numeric_limits<int>::min();
      
      current_statement__ = 49;
      nSubj = context__.vals_i("nSubj")[(1 - 1)];
      current_statement__ = 49;
      current_statement__ = 49;
      check_greater_or_equal(function__, "nSubj", nSubj, 1);
      current_statement__ = 50;
      context__.validate_dims("data initialization","nStim","int",
          context__.to_vec());
      nStim = std::numeric_limits<int>::min();
      
      current_statement__ = 50;
      nStim = context__.vals_i("nStim")[(1 - 1)];
      current_statement__ = 50;
      current_statement__ = 50;
      check_greater_or_equal(function__, "nStim", nStim, 1);
      current_statement__ = 51;
      validate_non_negative_index("xs", "nStim", nStim);
      current_statement__ = 52;
      context__.validate_dims("data initialization","xs","double",
          context__.to_vec(nStim));
      xs = std::vector<double>(nStim, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 52;
      assign(xs, nil_index_list(), context__.vals_r("xs"),
        "assigning variable xs");
      current_statement__ = 53;
      validate_non_negative_index("responses", "nSubj", nSubj);
      current_statement__ = 54;
      validate_non_negative_index("responses", "nStim", nStim);
      current_statement__ = 55;
      context__.validate_dims("data initialization","responses","double",
          context__.to_vec(nSubj, nStim));
      responses = std::vector<std::vector<double>>(nSubj, std::vector<double>(nStim, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> responses_flat__;
        current_statement__ = 55;
        assign(responses_flat__, nil_index_list(),
          context__.vals_r("responses"),
          "assigning variable responses_flat__");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= nStim; ++sym1__) {
          current_statement__ = 55;
          for (int sym2__ = 1; sym2__ <= nSubj; ++sym2__) {
            current_statement__ = 55;
            assign(responses,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              responses_flat__[(pos__ - 1)], "assigning variable responses");
            current_statement__ = 55;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 55;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 55;
        for (int sym2__ = 1; sym2__ <= nStim; ++sym2__) {
          current_statement__ = 55;
          current_statement__ = 55;
          check_greater_or_equal(function__, "responses[sym1__, sym2__]",
                                 responses[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 55;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 55;
        for (int sym2__ = 1; sym2__ <= nStim; ++sym2__) {
          current_statement__ = 55;
          current_statement__ = 55;
          check_less_or_equal(function__, "responses[sym1__, sym2__]",
                              responses[(sym1__ - 1)][(sym2__ - 1)], 100);}}
      current_statement__ = 56;
      validate_non_negative_index("M", "nSubj", nSubj);
      current_statement__ = 57;
      validate_non_negative_index("SDPlus", "nSubj", nSubj);
      current_statement__ = 58;
      validate_non_negative_index("SDMinus", "nSubj", nSubj);
      current_statement__ = 59;
      validate_non_negative_index("height", "nSubj", nSubj);
      current_statement__ = 60;
      validate_non_negative_index("predR", "nSubj", nSubj);
      current_statement__ = 61;
      validate_non_negative_index("predR", "nStim", nStim);
      current_statement__ = 62;
      validate_non_negative_index("gausFunc", "nSubj", nSubj);
      current_statement__ = 63;
      validate_non_negative_index("gausFunc", "nStim", nStim);
      current_statement__ = 64;
      validate_non_negative_index("log_lik", "nSubj", nSubj);
      current_statement__ = 65;
      validate_non_negative_index("log_lik", "nStim", nStim);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += nSubj;
      num_params_r__ += nSubj;
      num_params_r__ += nSubj;
      num_params_r__ += nSubj;
      num_params_r__ += 1;
      num_params_r__ += nSubj * nStim;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_aug_gaus_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> M;
      M = std::vector<local_scalar_t__>(nSubj, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 1;
        assign(M, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable M");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(M, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(M[(sym1__ - 1)], -.5, .5, lp__),
            "assigning variable M");
        } else {
          current_statement__ = 1;
          assign(M, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(M[(sym1__ - 1)], -.5, .5),
            "assigning variable M");
        }}
      std::vector<local_scalar_t__> SDPlus;
      SDPlus = std::vector<local_scalar_t__>(nSubj, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 2;
        assign(SDPlus, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable SDPlus");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(SDPlus, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(SDPlus[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable SDPlus");
        } else {
          current_statement__ = 2;
          assign(SDPlus, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(SDPlus[(sym1__ - 1)], 0, 1),
            "assigning variable SDPlus");
        }}
      std::vector<local_scalar_t__> SDMinus;
      SDMinus = std::vector<local_scalar_t__>(nSubj, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 3;
        assign(SDMinus, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable SDMinus");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(SDMinus, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(SDMinus[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable SDMinus");
        } else {
          current_statement__ = 3;
          assign(SDMinus, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(SDMinus[(sym1__ - 1)], 0, 1),
            "assigning variable SDMinus");
        }}
      std::vector<local_scalar_t__> height;
      height = std::vector<local_scalar_t__>(nSubj, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 4;
        assign(height, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable height");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(height, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(height[(sym1__ - 1)], 1, 100, lp__),
            "assigning variable height");
        } else {
          current_statement__ = 4;
          assign(height, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(height[(sym1__ - 1)], 1, 100),
            "assigning variable height");
        }}
      local_scalar_t__ noise;
      noise = DUMMY_VAR__;
      
      current_statement__ = 5;
      noise = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        noise = stan::math::lb_constrain(noise, 0, lp__);
      } else {
        current_statement__ = 5;
        noise = stan::math::lb_constrain(noise, 0);
      }
      std::vector<std::vector<local_scalar_t__>> predR;
      predR = std::vector<std::vector<local_scalar_t__>>(nSubj, std::vector<local_scalar_t__>(nStim, DUMMY_VAR__));
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= nStim; ++sym2__) {
          current_statement__ = 6;
          assign(predR,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())), in__.scalar(),
            "assigning variable predR");}}
      local_scalar_t__ M_group;
      M_group = DUMMY_VAR__;
      
      current_statement__ = 7;
      M_group = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        M_group = stan::math::lub_constrain(M_group, -.5, .5, lp__);
      } else {
        current_statement__ = 7;
        M_group = stan::math::lub_constrain(M_group, -.5, .5);
      }
      local_scalar_t__ SDPlus_group;
      SDPlus_group = DUMMY_VAR__;
      
      current_statement__ = 8;
      SDPlus_group = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        SDPlus_group = stan::math::lub_constrain(SDPlus_group, 0, 1, lp__);
      } else {
        current_statement__ = 8;
        SDPlus_group = stan::math::lub_constrain(SDPlus_group, 0, 1);
      }
      local_scalar_t__ SDMinus_group;
      SDMinus_group = DUMMY_VAR__;
      
      current_statement__ = 9;
      SDMinus_group = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        SDMinus_group = stan::math::lub_constrain(SDMinus_group, 0, 1, lp__);
      } else {
        current_statement__ = 9;
        SDMinus_group = stan::math::lub_constrain(SDMinus_group, 0, 1);
      }
      local_scalar_t__ height_group;
      height_group = DUMMY_VAR__;
      
      current_statement__ = 10;
      height_group = in__.scalar();
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        height_group = stan::math::lub_constrain(height_group, 1, 100, lp__);
      } else {
        current_statement__ = 10;
        height_group = stan::math::lub_constrain(height_group, 1, 100);
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> gausFunc;
      gausFunc = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubj, nStim);
      stan::math::fill(gausFunc, DUMMY_VAR__);
      
      current_statement__ = 18;
      for (int subj = 1; subj <= nSubj; ++subj) {
        current_statement__ = 16;
        for (int stim = 1; stim <= nStim; ++stim) {
          current_statement__ = 14;
          if (logical_gt(xs[(stim - 1)], M[(subj - 1)])) {
            current_statement__ = 13;
            assign(gausFunc,
              cons_list(index_uni(subj),
                cons_list(index_uni(stim), nil_index_list())),
              (height[(subj - 1)] *
                pow(stan::math::exp(1),
                  -(square((xs[(stim - 1)] - M[(subj - 1)])) /
                     (2 * square(SDPlus[(subj - 1)]))))),
              "assigning variable gausFunc");
          } else {
            current_statement__ = 12;
            assign(gausFunc,
              cons_list(index_uni(subj),
                cons_list(index_uni(stim), nil_index_list())),
              (height[(subj - 1)] *
                pow(stan::math::exp(1),
                  -(square((xs[(stim - 1)] - M[(subj - 1)])) /
                     (2 * square(SDMinus[(subj - 1)]))))),
              "assigning variable gausFunc");
          }}}
      {
        current_statement__ = 48;
        for (int subj = 1; subj <= nSubj; ++subj) {
          current_statement__ = 32;
          for (int stim = 1; stim <= nStim; ++stim) {
            current_statement__ = 25;
            lp_accum__.add(
              normal_lpdf<propto__>(responses[(subj - 1)][(stim - 1)],
                rvalue(gausFunc,
                  cons_list(index_uni(subj),
                    cons_list(index_uni(stim), nil_index_list())),
                  "gausFunc"), noise));
            current_statement__ = 26;
            lp_accum__.add(
              normal_lpdf<propto__>(predR[(subj - 1)][(stim - 1)],
                rvalue(gausFunc,
                  cons_list(index_uni(subj),
                    cons_list(index_uni(stim), nil_index_list())),
                  "gausFunc"), noise));
            current_statement__ = 27;
            lp_accum__.add(normal_lpdf<propto__>(M[(subj - 1)], M_group, .5));
            current_statement__ = 28;
            lp_accum__.add(
              normal_lpdf<propto__>(SDPlus[(subj - 1)], SDPlus_group, .5));
            current_statement__ = 29;
            lp_accum__.add(
              normal_lpdf<propto__>(SDMinus[(subj - 1)], SDMinus_group, .5));
            current_statement__ = 30;
            lp_accum__.add(
              normal_lpdf<propto__>(height[(subj - 1)], height_group, 10));}
          current_statement__ = 34;
          if (logical_lt(M_group, -.5)) {
            current_statement__ = 34;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 33;
            if (logical_gt(M_group, .5)) {
              current_statement__ = 33;
              lp_accum__.add(stan::math::negative_infinity());
            } else {
              current_statement__ = 33;
              lp_accum__.add(
                -log_diff_exp(normal_cdf_log(.5, 0, .25),
                   normal_cdf_log(-.5, 0, .25)));
            }
          }
          current_statement__ = 35;
          lp_accum__.add(normal_lpdf<propto__>(M_group, 0, .25));
          current_statement__ = 37;
          if (logical_lt(SDPlus_group, 0)) {
            current_statement__ = 37;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 36;
            if (logical_gt(SDPlus_group, 1)) {
              current_statement__ = 36;
              lp_accum__.add(stan::math::negative_infinity());
            } else {
              current_statement__ = 36;
              lp_accum__.add(
                -log_diff_exp(gamma_cdf_log(1, 1.5, 1.5),
                   gamma_cdf_log(0, 1.5, 1.5)));
            }
          }
          current_statement__ = 38;
          lp_accum__.add(gamma_lpdf<propto__>(SDPlus_group, 1.5, 1.5));
          current_statement__ = 40;
          if (logical_lt(SDMinus_group, 0)) {
            current_statement__ = 40;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 39;
            if (logical_gt(SDMinus_group, 1)) {
              current_statement__ = 39;
              lp_accum__.add(stan::math::negative_infinity());
            } else {
              current_statement__ = 39;
              lp_accum__.add(
                -log_diff_exp(gamma_cdf_log(1, 1.5, 1.5),
                   gamma_cdf_log(0, 1.5, 1.5)));
            }
          }
          current_statement__ = 41;
          lp_accum__.add(gamma_lpdf<propto__>(SDMinus_group, 1.5, 1.5));
          current_statement__ = 43;
          if (logical_lt(height_group, 1)) {
            current_statement__ = 43;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 42;
            if (logical_gt(height_group, 100)) {
              current_statement__ = 42;
              lp_accum__.add(stan::math::negative_infinity());
            } else {
              current_statement__ = 42;
              lp_accum__.add(
                -log_diff_exp(normal_cdf_log(100, 75, 10),
                   normal_cdf_log(1, 75, 10)));
            }
          }
          current_statement__ = 44;
          lp_accum__.add(normal_lpdf<propto__>(height_group, 75, 10));
          current_statement__ = 45;
          if (logical_lt(noise, 0)) {
            current_statement__ = 45;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 45;
            lp_accum__.add(-normal_ccdf_log(0, 0, 5));
          }
          current_statement__ = 46;
          lp_accum__.add(normal_lpdf<propto__>(noise, 0, 5));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_aug_gaus_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> M;
      M = std::vector<double>(nSubj, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 1;
        assign(M, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable M");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 1;
        assign(M, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(M[(sym1__ - 1)], -.5, .5),
          "assigning variable M");}
      std::vector<double> SDPlus;
      SDPlus = std::vector<double>(nSubj, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 2;
        assign(SDPlus, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable SDPlus");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 2;
        assign(SDPlus, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(SDPlus[(sym1__ - 1)], 0, 1),
          "assigning variable SDPlus");}
      std::vector<double> SDMinus;
      SDMinus = std::vector<double>(nSubj, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 3;
        assign(SDMinus, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable SDMinus");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 3;
        assign(SDMinus, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(SDMinus[(sym1__ - 1)], 0, 1),
          "assigning variable SDMinus");}
      std::vector<double> height;
      height = std::vector<double>(nSubj, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 4;
        assign(height, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable height");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 4;
        assign(height, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(height[(sym1__ - 1)], 1, 100),
          "assigning variable height");}
      double noise;
      noise = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      noise = in__.scalar();
      current_statement__ = 5;
      noise = stan::math::lb_constrain(noise, 0);
      std::vector<std::vector<double>> predR;
      predR = std::vector<std::vector<double>>(nSubj, std::vector<double>(nStim, std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= nStim; ++sym2__) {
          current_statement__ = 6;
          assign(predR,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())), in__.scalar(),
            "assigning variable predR");}}
      double M_group;
      M_group = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      M_group = in__.scalar();
      current_statement__ = 7;
      M_group = stan::math::lub_constrain(M_group, -.5, .5);
      double SDPlus_group;
      SDPlus_group = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      SDPlus_group = in__.scalar();
      current_statement__ = 8;
      SDPlus_group = stan::math::lub_constrain(SDPlus_group, 0, 1);
      double SDMinus_group;
      SDMinus_group = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      SDMinus_group = in__.scalar();
      current_statement__ = 9;
      SDMinus_group = stan::math::lub_constrain(SDMinus_group, 0, 1);
      double height_group;
      height_group = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      height_group = in__.scalar();
      current_statement__ = 10;
      height_group = stan::math::lub_constrain(height_group, 1, 100);
      Eigen::Matrix<double, -1, -1> gausFunc;
      gausFunc = Eigen::Matrix<double, -1, -1>(nSubj, nStim);
      stan::math::fill(gausFunc, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        vars__.emplace_back(M[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        vars__.emplace_back(SDPlus[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        vars__.emplace_back(SDMinus[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        vars__.emplace_back(height[(sym1__ - 1)]);}
      vars__.emplace_back(noise);
      for (int sym1__ = 1; sym1__ <= nStim; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubj; ++sym2__) {
          vars__.emplace_back(predR[(sym2__ - 1)][(sym1__ - 1)]);}}
      vars__.emplace_back(M_group);
      vars__.emplace_back(SDPlus_group);
      vars__.emplace_back(SDMinus_group);
      vars__.emplace_back(height_group);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 18;
      for (int subj = 1; subj <= nSubj; ++subj) {
        current_statement__ = 16;
        for (int stim = 1; stim <= nStim; ++stim) {
          current_statement__ = 14;
          if (logical_gt(xs[(stim - 1)], M[(subj - 1)])) {
            current_statement__ = 13;
            assign(gausFunc,
              cons_list(index_uni(subj),
                cons_list(index_uni(stim), nil_index_list())),
              (height[(subj - 1)] *
                pow(stan::math::exp(1),
                  -(square((xs[(stim - 1)] - M[(subj - 1)])) /
                     (2 * square(SDPlus[(subj - 1)]))))),
              "assigning variable gausFunc");
          } else {
            current_statement__ = 12;
            assign(gausFunc,
              cons_list(index_uni(subj),
                cons_list(index_uni(stim), nil_index_list())),
              (height[(subj - 1)] *
                pow(stan::math::exp(1),
                  -(square((xs[(stim - 1)] - M[(subj - 1)])) /
                     (2 * square(SDMinus[(subj - 1)]))))),
              "assigning variable gausFunc");
          }}}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= nStim; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nSubj; ++sym2__) {
            vars__.emplace_back(
              rvalue(gausFunc,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "gausFunc"));}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<double>> log_lik;
      log_lik = std::vector<std::vector<double>>(nSubj, std::vector<double>(nStim, std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 24;
      for (int subj = 1; subj <= nSubj; ++subj) {
        current_statement__ = 22;
        for (int stim = 1; stim <= nStim; ++stim) {
          current_statement__ = 20;
          assign(log_lik,
            cons_list(index_uni(subj),
              cons_list(index_uni(stim), nil_index_list())),
            normal_lpdf<false>(responses[(subj - 1)][(stim - 1)],
              rvalue(gausFunc,
                cons_list(index_uni(subj),
                  cons_list(index_uni(stim), nil_index_list())), "gausFunc"),
              noise), "assigning variable log_lik");}}
      for (int sym1__ = 1; sym1__ <= nStim; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubj; ++sym2__) {
          vars__.emplace_back(log_lik[(sym2__ - 1)][(sym1__ - 1)]);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> M;
      M = std::vector<double>(nSubj, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(M, nil_index_list(), context__.vals_r("M"),
        "assigning variable M");
      std::vector<double> M_free__;
      M_free__ = std::vector<double>(nSubj, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 1;
        assign(M_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(M[(sym1__ - 1)], -.5, .5),
          "assigning variable M_free__");}
      std::vector<double> SDPlus;
      SDPlus = std::vector<double>(nSubj, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(SDPlus, nil_index_list(), context__.vals_r("SDPlus"),
        "assigning variable SDPlus");
      std::vector<double> SDPlus_free__;
      SDPlus_free__ = std::vector<double>(nSubj, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 2;
        assign(SDPlus_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(SDPlus[(sym1__ - 1)], 0, 1),
          "assigning variable SDPlus_free__");}
      std::vector<double> SDMinus;
      SDMinus = std::vector<double>(nSubj, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(SDMinus, nil_index_list(), context__.vals_r("SDMinus"),
        "assigning variable SDMinus");
      std::vector<double> SDMinus_free__;
      SDMinus_free__ = std::vector<double>(nSubj, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 3;
        assign(SDMinus_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(SDMinus[(sym1__ - 1)], 0, 1),
          "assigning variable SDMinus_free__");}
      std::vector<double> height;
      height = std::vector<double>(nSubj, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(height, nil_index_list(), context__.vals_r("height"),
        "assigning variable height");
      std::vector<double> height_free__;
      height_free__ = std::vector<double>(nSubj, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        current_statement__ = 4;
        assign(height_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(height[(sym1__ - 1)], 1, 100),
          "assigning variable height_free__");}
      double noise;
      noise = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      noise = context__.vals_r("noise")[(1 - 1)];
      double noise_free__;
      noise_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      noise_free__ = stan::math::lb_free(noise, 0);
      std::vector<std::vector<double>> predR;
      predR = std::vector<std::vector<double>>(nSubj, std::vector<double>(nStim, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> predR_flat__;
        current_statement__ = 6;
        assign(predR_flat__, nil_index_list(), context__.vals_r("predR"),
          "assigning variable predR_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= nStim; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= nSubj; ++sym2__) {
            current_statement__ = 6;
            assign(predR,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              predR_flat__[(pos__ - 1)], "assigning variable predR");
            current_statement__ = 6;
            pos__ = (pos__ + 1);}}
      }
      double M_group;
      M_group = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      M_group = context__.vals_r("M_group")[(1 - 1)];
      double M_group_free__;
      M_group_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      M_group_free__ = stan::math::lub_free(M_group, -.5, .5);
      double SDPlus_group;
      SDPlus_group = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      SDPlus_group = context__.vals_r("SDPlus_group")[(1 - 1)];
      double SDPlus_group_free__;
      SDPlus_group_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      SDPlus_group_free__ = stan::math::lub_free(SDPlus_group, 0, 1);
      double SDMinus_group;
      SDMinus_group = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      SDMinus_group = context__.vals_r("SDMinus_group")[(1 - 1)];
      double SDMinus_group_free__;
      SDMinus_group_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      SDMinus_group_free__ = stan::math::lub_free(SDMinus_group, 0, 1);
      double height_group;
      height_group = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      height_group = context__.vals_r("height_group")[(1 - 1)];
      double height_group_free__;
      height_group_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      height_group_free__ = stan::math::lub_free(height_group, 1, 100);
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        vars__.emplace_back(M_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        vars__.emplace_back(SDPlus_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        vars__.emplace_back(SDMinus_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        vars__.emplace_back(height_free__[(sym1__ - 1)]);}
      vars__.emplace_back(noise_free__);
      for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nStim; ++sym2__) {
          vars__.emplace_back(predR[(sym1__ - 1)][(sym2__ - 1)]);}}
      vars__.emplace_back(M_group_free__);
      vars__.emplace_back(SDPlus_group_free__);
      vars__.emplace_back(SDMinus_group_free__);
      vars__.emplace_back(height_group_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("M");
    names__.emplace_back("SDPlus");
    names__.emplace_back("SDMinus");
    names__.emplace_back("height");
    names__.emplace_back("noise");
    names__.emplace_back("predR");
    names__.emplace_back("M_group");
    names__.emplace_back("SDPlus_group");
    names__.emplace_back("SDMinus_group");
    names__.emplace_back("height_group");
    names__.emplace_back("gausFunc");
    names__.emplace_back("log_lik");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nSubj)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nSubj)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nSubj)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nSubj)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nSubj),
                                             static_cast<size_t>(nStim)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nSubj),
                                             static_cast<size_t>(nStim)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nSubj),
                                             static_cast<size_t>(nStim)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "M" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "SDPlus" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "SDMinus" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "height" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "noise");
    for (int sym1__ = 1; sym1__ <= nStim; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubj; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "predR" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    param_names__.emplace_back(std::string() + "M_group");
    param_names__.emplace_back(std::string() + "SDPlus_group");
    param_names__.emplace_back(std::string() + "SDMinus_group");
    param_names__.emplace_back(std::string() + "height_group");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nStim; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubj; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gausFunc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nStim; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubj; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "M" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "SDPlus" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "SDMinus" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nSubj; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "height" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "noise");
    for (int sym1__ = 1; sym1__ <= nStim; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubj; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "predR" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    param_names__.emplace_back(std::string() + "M_group");
    param_names__.emplace_back(std::string() + "SDPlus_group");
    param_names__.emplace_back(std::string() + "SDMinus_group");
    param_names__.emplace_back(std::string() + "height_group");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nStim; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubj; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gausFunc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nStim; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubj; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"M\",\"type\":{\"name\":\"array\",\"length\":" << nSubj << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"SDPlus\",\"type\":{\"name\":\"array\",\"length\":" << nSubj << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"SDMinus\",\"type\":{\"name\":\"array\",\"length\":" << nSubj << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"height\",\"type\":{\"name\":\"array\",\"length\":" << nSubj << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"noise\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"predR\",\"type\":{\"name\":\"array\",\"length\":" << nSubj << ",\"element_type\":{\"name\":\"array\",\"length\":" << nStim << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"M_group\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"SDPlus_group\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"SDMinus_group\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"height_group\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gausFunc\",\"type\":{\"name\":\"matrix\",\"rows\":" << nSubj << ",\"cols\":" << nStim << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" << nSubj << ",\"element_type\":{\"name\":\"array\",\"length\":" << nStim << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"M\",\"type\":{\"name\":\"array\",\"length\":" << nSubj << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"SDPlus\",\"type\":{\"name\":\"array\",\"length\":" << nSubj << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"SDMinus\",\"type\":{\"name\":\"array\",\"length\":" << nSubj << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"height\",\"type\":{\"name\":\"array\",\"length\":" << nSubj << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"noise\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"predR\",\"type\":{\"name\":\"array\",\"length\":" << nSubj << ",\"element_type\":{\"name\":\"array\",\"length\":" << nStim << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"M_group\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"SDPlus_group\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"SDMinus_group\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"height_group\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gausFunc\",\"type\":{\"name\":\"matrix\",\"rows\":" << nSubj << ",\"cols\":" << nStim << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" << nSubj << ",\"element_type\":{\"name\":\"array\",\"length\":" << nStim << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_aug_gaus_namespace::model_aug_gaus;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_aug_gaus_namespace::profiles__;
}
#endif
#endif
